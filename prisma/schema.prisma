// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = "postgres://default:tvzFa0sET3eW@ep-nameless-dawn-a4hf90vm-pooler.us-east-1.aws.neon.tech/verceldb?sslmode=require"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user UserNextAuth @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String       @id @default(cuid())
  sessionToken String       @unique
  userId       String
  expires      DateTime
  user         UserNextAuth @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserNextAuth {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  projects      Project[]
  posts         Post[]
  products      Product[]
  About         About[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Project {
  id          String       @id @default(cuid())
  title       String
  description String
  imageUrl    String?
  githubUrl   String?
  liveUrl     String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  userId      String
  user        UserNextAuth @relation(fields: [userId], references: [id])
}

model Post {
  id        String       @id @default(cuid())
  title     String
  content   String
  published Boolean      @default(false)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  userId    String
  user      UserNextAuth @relation(fields: [userId], references: [id])
}

model Product {
  id          String       @id @default(cuid())
  title       String
  description String
  imageUrl    String?
  price       Int
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  userId      String
  user        UserNextAuth @relation(fields: [userId], references: [id])
}

model About {
  id          String       @id @default(cuid())
  title       String
  description String
  imageUrl    String
  content     String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  userId      String
  user        UserNextAuth @relation(fields: [userId], references: [id])
}
